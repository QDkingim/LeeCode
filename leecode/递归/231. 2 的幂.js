/**
 * 判断一个数是否是2的幂
 *
 * 解题思路：
 * 1. 2的幂的二进制表示中只有一个1，其余都是0
 * 2. 当n是2的幂时，n-1的二进制表示中所有位都是1
 * 3. 因此，n & (n-1)的结果必然是0
 *
 * 例如：
 * 8的二进制是1000
 * 7的二进制是0111
 * 1000 & 0111 = 0000
 *
 * 时间复杂度：O(1)
 * 空间复杂度：O(1)
 *
 * @param {number} n 要判断的数字
 * @return {boolean} 如果是2的幂返回true，否则返回false
 */
var isPowerOfTwo = function (n) {
  // 特殊情况处理：0不是2的幂
  if (n === 0) return false;

  // 使用位运算技巧判断是否是2的幂
  // 如果n是2的幂，n & (n-1)的结果必然是0
  return (n & (n - 1)) === 0;
};

/**
 * 位运算直接对二进制位进行操作，是底层高效的运算方式
 * 位运算直接对二进制位进行操作，是底层高效的运算方式
 */
