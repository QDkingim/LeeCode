/**
 * 爬楼梯问题
 * 假设你正在爬楼梯，需要n阶才能到达楼顶。
 * 每次你可以爬1或2个台阶，问有多少种不同的方法可以爬到楼顶？
 *
 * 解题思路：
 * 1. 这是一个典型的动态规划问题
 * 2. 对于第n阶楼梯，可以从第(n-1)阶爬1步上来，或者从第(n-2)阶爬2步上来
 * 3. 因此f(n) = f(n-1) + f(n-2)，这是一个斐波那契数列
 * 4. 使用迭代方法，只需要保存前两个状态即可
 *
 * 时间复杂度：O(n)，需要遍历一次从3到n的所有数字
 * 空间复杂度：O(1)，只使用了两个变量a和b来存储状态
 *
 * @param {number} n 楼梯的阶数
 * @return {number} 爬到楼顶的不同方法数
 */
var climbStairs = function (n) {
  // 处理边界情况
  if (n === 1) return 1; // 只有1阶，只有1种方法
  if (n === 2) return 2; // 有2阶，有2种方法：1+1或2

  // 初始化前两个状态
  let a = 1; // 代表f(n-2)
  let b = 2; // 代表f(n-1)

  // 从第3阶开始迭代计算
  for (let i = 3; i <= n; i++) {
    let temp = a + b; // 计算当前阶数的方法数
    a = b; // 更新f(n-2)
    b = temp; // 更新f(n-1)
  }
  return b; // 返回最终结果
};
